2022-10-25 15:33:51,232 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.8.13 (default, Mar 28 2022, 06:59:08) [MSC v.1916 64 bit (AMD64)]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2060 SUPER
CUDA_HOME: D:\Cuda116\tooklit
NVCC: Cuda compilation tools, release 11.6, V11.6.112
MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.32.31332 版
GCC: n/a
PyTorch: 1.10.0+cu113
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=C:/w/b/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/w/b/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, 

TorchVision: 0.11.1+cu113
OpenCV: 4.6.0
MMCV: 1.6.2
MMCV Compiler: MSVC 192829924
MMCV CUDA Compiler: 11.3
MMDetection: 2.25.2+97784f6
------------------------------------------------------------

2022-10-25 15:33:51,773 - mmdet - INFO - Distributed training: False
2022-10-25 15:33:52,366 - mmdet - INFO - Config:
checkpoint_config = dict(interval=1)
log_config = dict(interval=5, hooks=[dict(type='TextLoggerHook')])
log_level = 'INFO'
load_from = None
resume_from = None
dist_params = dict(backend='nccl')
workflow = [('train', 1)]
opencv_num_threads = 1
mp_start_method = 'fork'
custom_imports = dict(
    imports=['models', 'datasets'], allow_failed_imports=False)
model = dict(
    type='YOLOV3',
    backbone=dict(
        type='MobileNetV2',
        out_indices=(2, 4, 6),
        act_cfg=dict(type='LeakyReLU', negative_slope=0.1),
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://mmdet/mobilenet_v2')),
    neck=dict(
        type='YOLOV3Neck',
        num_scales=3,
        in_channels=[320, 96, 32],
        out_channels=[96, 96, 96]),
    bbox_head=dict(
        type='YOLOV3Head',
        num_classes=80,
        in_channels=[96, 96, 96],
        out_channels=[96, 96, 96],
        anchor_generator=dict(
            type='YOLOAnchorGenerator',
            base_sizes=[[(116, 90), (156, 198), (373, 326)],
                        [(30, 61), (62, 45), (59, 119)],
                        [(10, 13), (16, 30), (33, 23)]],
            strides=[32, 16, 8]),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[32, 16, 8],
        loss_cls=dict(
            type='CrossEntropyLoss',
            use_sigmoid=True,
            loss_weight=1.0,
            reduction='sum'),
        loss_conf=dict(
            type='CrossEntropyLoss',
            use_sigmoid=True,
            loss_weight=1.0,
            reduction='sum'),
        loss_xy=dict(
            type='CrossEntropyLoss',
            use_sigmoid=True,
            loss_weight=2.0,
            reduction='sum'),
        loss_wh=dict(type='MSELoss', loss_weight=2.0, reduction='sum')),
    train_cfg=dict(
        assigner=dict(
            type='GridAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.5,
            min_pos_iou=0)),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        conf_thr=0.005,
        nms=dict(type='nms', iou_threshold=0.45),
        max_per_img=100))
dataset_type = 'CocoDataset'
data_root = 'D:/gitlab/node2-person/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='Expand',
        mean=[123.675, 116.28, 103.53],
        to_rgb=True,
        ratio_range=(1, 2)),
    dict(
        type='MinIoURandomCrop',
        min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),
        min_crop_size=0.3),
    dict(
        type='Resize',
        img_scale=[(320, 320), (416, 416)],
        multiscale_mode='range',
        keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(416, 416),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=24,
    workers_per_gpu=4,
    train=dict(
        type='RepeatDataset',
        times=10,
        dataset=dict(
            type='CocoDataset',
            ann_file='D:/gitlab/node2-person/train/annotations/train.json',
            img_prefix='D:/gitlab/node2-person/train/images/',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(
                    type='Expand',
                    mean=[123.675, 116.28, 103.53],
                    to_rgb=True,
                    ratio_range=(1, 2)),
                dict(
                    type='MinIoURandomCrop',
                    min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),
                    min_crop_size=0.3),
                dict(
                    type='Resize',
                    img_scale=[(320, 320), (416, 416)],
                    multiscale_mode='range',
                    keep_ratio=True),
                dict(type='RandomFlip', flip_ratio=0.5),
                dict(type='PhotoMetricDistortion'),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='Pad', size_divisor=32),
                dict(type='DefaultFormatBundle'),
                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
            ])),
    val=dict(
        type='CocoDataset',
        ann_file='D:/gitlab/node2-person/valid/annotations/vaild.json',
        img_prefix='D:/gitlab/node2-person/valid/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(416, 416),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='DefaultFormatBundle'),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='D:/gitlab/node2-person/valid/annotations/vaild.json',
        img_prefix='D:/gitlab/node2-person/valid/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(416, 416),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='DefaultFormatBundle'),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
optimizer = dict(type='SGD', lr=0.003, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=4000,
    warmup_ratio=0.0001,
    step=[24, 28])
runner = dict(type='EpochBasedRunner', max_epochs=30)
evaluation = dict(interval=1, metric=['bbox'])
find_unused_parameters = True
auto_scale_lr = dict(base_batch_size=192)
work_dir = './work_dirs\yolov3_192_node2_person'
auto_resume = False
gpu_ids = range(0, 1)

2022-10-25 15:33:52,371 - mmdet - INFO - Set random seed to 2125697126, deterministic: False
2022-10-25 15:33:52,433 - mmdet - INFO - initialize MobileNetV2 with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://mmdet/mobilenet_v2'}
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer1.0.depthwise_conv.conv.weight - torch.Size([32, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer1.0.depthwise_conv.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer1.0.depthwise_conv.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer1.0.linear_conv.conv.weight - torch.Size([16, 32, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer1.0.linear_conv.bn.weight - torch.Size([16]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer1.0.linear_conv.bn.bias - torch.Size([16]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.0.expand_conv.conv.weight - torch.Size([96, 16, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.0.expand_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.0.expand_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.0.depthwise_conv.conv.weight - torch.Size([96, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.0.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.0.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.0.linear_conv.conv.weight - torch.Size([24, 96, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.0.linear_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.0.linear_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.1.expand_conv.conv.weight - torch.Size([144, 24, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.1.expand_conv.bn.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.1.expand_conv.bn.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.1.depthwise_conv.conv.weight - torch.Size([144, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.1.depthwise_conv.bn.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.1.depthwise_conv.bn.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.1.linear_conv.conv.weight - torch.Size([24, 144, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.1.linear_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer2.1.linear_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.0.expand_conv.conv.weight - torch.Size([144, 24, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.0.expand_conv.bn.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.0.expand_conv.bn.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.0.depthwise_conv.conv.weight - torch.Size([144, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.0.depthwise_conv.bn.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.0.depthwise_conv.bn.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.0.linear_conv.conv.weight - torch.Size([32, 144, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.0.linear_conv.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.0.linear_conv.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.1.expand_conv.conv.weight - torch.Size([192, 32, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.1.expand_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.1.expand_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.1.depthwise_conv.conv.weight - torch.Size([192, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.1.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.1.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.1.linear_conv.conv.weight - torch.Size([32, 192, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.1.linear_conv.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.1.linear_conv.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.2.expand_conv.conv.weight - torch.Size([192, 32, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.2.expand_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.2.expand_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.2.depthwise_conv.conv.weight - torch.Size([192, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.2.linear_conv.conv.weight - torch.Size([32, 192, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.2.linear_conv.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer3.2.linear_conv.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.0.expand_conv.conv.weight - torch.Size([192, 32, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.0.expand_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.0.expand_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.0.depthwise_conv.conv.weight - torch.Size([192, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.0.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.0.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.0.linear_conv.conv.weight - torch.Size([64, 192, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.0.linear_conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.0.linear_conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.1.expand_conv.conv.weight - torch.Size([384, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.1.expand_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.1.expand_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.1.depthwise_conv.conv.weight - torch.Size([384, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.1.depthwise_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.1.depthwise_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.1.linear_conv.conv.weight - torch.Size([64, 384, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.1.linear_conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.1.linear_conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.2.expand_conv.conv.weight - torch.Size([384, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.2.expand_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.2.expand_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.2.depthwise_conv.conv.weight - torch.Size([384, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.2.depthwise_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.2.depthwise_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.2.linear_conv.conv.weight - torch.Size([64, 384, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.2.linear_conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.2.linear_conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.3.expand_conv.conv.weight - torch.Size([384, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.3.expand_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.3.expand_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.3.depthwise_conv.conv.weight - torch.Size([384, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.3.depthwise_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.3.depthwise_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.3.linear_conv.conv.weight - torch.Size([64, 384, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.3.linear_conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer4.3.linear_conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.0.expand_conv.conv.weight - torch.Size([384, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.0.expand_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.0.expand_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.0.depthwise_conv.conv.weight - torch.Size([384, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.0.depthwise_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.0.depthwise_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.0.linear_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.0.linear_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.0.linear_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.1.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.1.expand_conv.bn.weight - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.1.expand_conv.bn.bias - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.1.depthwise_conv.conv.weight - torch.Size([576, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.1.depthwise_conv.bn.weight - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.1.depthwise_conv.bn.bias - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.1.linear_conv.conv.weight - torch.Size([96, 576, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.1.linear_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.1.linear_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.2.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.2.expand_conv.bn.weight - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.2.expand_conv.bn.bias - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.2.depthwise_conv.conv.weight - torch.Size([576, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.2.depthwise_conv.bn.weight - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.2.depthwise_conv.bn.bias - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.2.linear_conv.conv.weight - torch.Size([96, 576, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.2.linear_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer5.2.linear_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.0.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.0.expand_conv.bn.weight - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.0.expand_conv.bn.bias - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.0.depthwise_conv.conv.weight - torch.Size([576, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.0.depthwise_conv.bn.weight - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.0.depthwise_conv.bn.bias - torch.Size([576]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.0.linear_conv.conv.weight - torch.Size([160, 576, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.0.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.0.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.1.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.1.expand_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.1.expand_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.1.depthwise_conv.conv.weight - torch.Size([960, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.1.depthwise_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.1.depthwise_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.1.linear_conv.conv.weight - torch.Size([160, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.1.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.1.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.2.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.2.expand_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.2.expand_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.2.depthwise_conv.conv.weight - torch.Size([960, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.2.depthwise_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.2.depthwise_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.2.linear_conv.conv.weight - torch.Size([160, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.2.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer6.2.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer7.0.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer7.0.expand_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer7.0.expand_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer7.0.depthwise_conv.conv.weight - torch.Size([960, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer7.0.depthwise_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer7.0.depthwise_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer7.0.linear_conv.conv.weight - torch.Size([320, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer7.0.linear_conv.bn.weight - torch.Size([320]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.layer7.0.linear_conv.bn.bias - torch.Size([320]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.conv2.conv.weight - torch.Size([1280, 320, 1, 1]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.conv2.bn.weight - torch.Size([1280]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

backbone.conv2.bn.bias - torch.Size([1280]): 
PretrainedInit: load from open-mmlab://mmdet/mobilenet_v2 

neck.detect1.conv1.conv.weight - torch.Size([96, 320, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([192, 96, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([96, 192, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([192, 96, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([96, 192, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([96, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([96, 192, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([192, 96, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([96, 192, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([192, 96, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([96, 192, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([96, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([96, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([192, 96, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([96, 192, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([192, 96, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([96, 192, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([255, 96, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([255]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([255, 96, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([255]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([255, 96, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([255]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2022-10-25 15:33:52,659 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2022-10-25 15:33:52,682 - mmdet - INFO - Start running, host: hk@DESKTOP-8L9DT71, work_dir: D:\github\edgelab\work_dirs\yolov3_192_node2_person
2022-10-25 15:33:52,682 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-10-25 15:33:52,683 - mmdet - INFO - workflow: [('train', 1)], max: 30 epochs
2022-10-25 15:33:52,683 - mmdet - INFO - Checkpoints will be saved to D:\github\edgelab\work_dirs\yolov3_192_node2_person by HardDiskBackend.
